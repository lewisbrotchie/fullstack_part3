{"version":3,"sources":["services/People.js","components/Person.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","name","number","handleDelete","onClick","Persons","persons","map","person","key","PersonForm","addPerson","handleNameChange","handlePhoneChange","onSubmit","onChange","type","Filter","props","handleFilterChange","Notification","message","notificationStyle","color","error","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setMessage","setError","useEffect","personService","setNotification","setTimeout","e","filter","toLowerCase","includes","target","value","preventDefault","personObject","find","window","confirm","catch","n","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6cbb995.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst deletePerson = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update, deletePerson };\n","import React from \"react\";\n\nconst Person = ({ name, number, handleDelete }) => {\n  return (\n    <div>\n      {name} {number} <button onClick={handleDelete}>delete</button>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\nimport Person from \"./Person\";\n\nconst Persons = ({ persons, handleDelete }) => {\n  return persons.map(person => (\n    <Person\n      key={person.id}\n      name={person.name}\n      number={person.number}\n      handleDelete={() => handleDelete(person.id)}\n    />\n  ));\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst PersonForm = ({ addPerson, handleNameChange, handlePhoneChange }) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input onChange={handleNameChange} />\n      </div>\n      <div>\n        number <input onChange={handlePhoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Filter = props => {\n  return (\n    <div>\n      filter shown with <input onChange={props.handleFilterChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst Notification = ({ message, error }) => {\n  const notificationStyle = {\n    color: error ? \"red\" : \"green\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n\n  if (message === null) {\n    return null;\n  }\n\n  return <div style={notificationStyle}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/People\";\nimport Persons from \"./components/Persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newPhone, setNewPhone] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(false);\n\n  //get initial state from server\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response);\n    });\n  }, []);\n\n  const addPerson = e => {\n    e.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newPhone\n    };\n    if (persons.find(person => person.name === newName)) {\n      if (\n        window.confirm(\n          `${newName} already added to phonebook, replace old number with new one?`\n        )\n      ) {\n        const person = persons.find(person => person.name === newName);\n        personService\n          .update(person.id, personObject)\n          .then(() => {\n            personService.getAll().then(response => {\n              setPersons(response);\n            });\n            setNotification(`Updated ${newName}`);\n          })\n          .catch(error => {\n            setError(true);\n            setNotification(\n              `the person '${newName}' was already deleted from server`\n            );\n            setPersons(persons.filter(n => n.name !== newName));\n          });\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response));\n          setNotification(`Added ${newName}`);\n          setNewName(\"\");\n          setNewPhone(\"\");\n        })\n        .catch(error => {\n          setError(true);\n          setNotification(error.response.data.error);\n        });\n    }\n  };\n\n  const setNotification = message => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(null);\n      setError(false);\n    }, 5000);\n  };\n\n  const handleNameChange = e => {\n    setNewName(e.target.value);\n  };\n\n  const handlePhoneChange = e => {\n    setNewPhone(e.target.value);\n  };\n\n  const handleFilterChange = e => {\n    setPersons(\n      persons.filter(person =>\n        person.name.toLowerCase().includes(e.target.value.toLowerCase())\n      )\n    );\n  };\n\n  const handleDelete = id => {\n    const person = persons.find(person => person.id === id);\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService.deletePerson(id).then(() => {\n        personService.getAll().then(response => {\n          setPersons(response);\n        });\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} error={error} />\n      <Filter handleFilterChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handlePhoneChange={handlePhoneChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}